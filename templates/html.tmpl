<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>Manimbook Chapter Integration</title>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@4.5.0/css/xterm.css" />
	<script src="https://cdn.jsdelivr.net/npm/xterm@4.5.0/lib/xterm.js"></script> 
	<script src="https://cdn.jsdelivr.net/npm/xterm-addon-fit@0.3.0/lib/xterm-addon-fit.js"></script>
	<style>
		/* Optional styling for terminal containers */
		.terminal-container {
			margin-top: 5px;
			height: 200px;
		}

		.placeholder {
			max-width: 75%;
		}

		.faux-image-wrapper {
			margin-bottom: 10px;
			position: relative;
			padding-bottom: 100%;
			/* Or height: 200px; */
		}

		.faux-image {
			background: #111111;
			border-radius: 4px;
			height: 100%;
			position: absolute;
			width: 100%;
		}

		.shimmer {
			overflow: hidden;
			position: relative;
		}

		.shimmer::before {
			content: "";
			position: absolute;
			background: linear-gradient(90deg,
					rgba(255, 255, 255, 0) 0%,
					rgba(255, 255, 255, 0.4) 50%,
					rgba(255, 255, 255, 0) 100%);
			height: 100%;
			width: 100%;
			z-index: 1;
			animation: shimmer 1s infinite;
		}

		@keyframes shimmer {
			0% {
				transform: translateX(-100%);
			}

			100% {
				transform: translateX(100%);
			}
		}


		.hidden {
			display: none;
		}

		:root {
			color-scheme: dark;
		}

		body {
			color: #fff;
			background: #444;
			line-height: 1.5;
			font-family: Verdana, Geneva, Tahoma, sans-serif
		}

		main {
			max-width: 50em;
			background: #111;
			padding: 2em 3em;
			margin-left: auto;
			margin-right: auto;
			border-radius: 0.5em;
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6,
		h7 {
			margin: 1em 0 0.5em 0;
			line-height: 1.2;
		}

		img {
			max-width: 100%;
		}

		video {
			max-width: 75%;
		}

		pre,
		code,
		samp,
		kbd {
			color: #0cc73b;
			font-family: monospace, monospace;
		}

		pre,
		blockquote {
			background: #262626;
			padding: 0.5em;
		}

		pre {
			overflow: auto;
			white-space: pre;
			overflow-x: auto;
			line-height: normal;
			font-family: Menlo, 'DejaVu Sans Mono', consolas, 'Courier New', monospace;
		}

		blockquote {
			border-left: medium solid #ccc;
			margin: 1em 0;
		}

		blockquote :first-child {
			margin-top: 0;
		}

		blockquote :last-child {
			margin-bottom: 0;
		}

		table {
			border-collapse: collapse;
		}

		th,
		td {
			border: thin solid #999;
			padding: 0.3em 0.4em;
			text-align: left;
		}

		.zoom {
			display: none;
			z-index: 20;
		}

		.white {
			fill: rgb(255, 255, 255)
		}


		@media screen and (min-width: 40em) {
			body {
				background: #333;
				padding: 0;
				margin: 0;
			}

			.zoom {
				display: flex;
				flex-direction: column;
				position: fixed;
				bottom: 3%;
				left: 3%;
				justify-content: center;
			}

			.zoom .buttons {
				display: flex;
				flex-direction: column;
				background: #ccc;
				border-radius: 5px;
			}

			button {
				height: 4em;
				width: 4em;
				border: none;
				background-color: transparent;
			}

			.buttons svg {
				height: 1.5em;
				width: 1.5em;
			}

			button:hover {
				background-color: #333;
				transition: 1s;
				color: #fff
			}

			main {
				background-color: #111;
				padding: 5em 6em;
				transform-origin: top center;
				margin: 1em auto;
				/* box-shadow: 0.4em 0.4em 0.4em #222; */
			}
		}
	</style>
</head>

<body>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/msgpack-lite/0.1.26/msgpack.min.js"
		integrity="sha512-harMiusNxs02ryf3eqc3iQalz2RSd0z38vzOyuFwvQyW046h2m+/47WiDmPW9soh/p71WQMRSkhSynEww3/bOA=="
		crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script>
		// A mapping from id to terminal instance
		const terminals = {};

		// Establish a WebSocket connection (replace with your endpoint)
		const socket = new WebSocket('{{ .WebsocketURL }}');
		// Expect binary messages so we can decode MessagePack data
		socket.binaryType = 'arraybuffer';

		socket.onopen = function () {
			console.log('WebSocket connection established.');
			const handshake = {chapter: "{{ .ChapterName }}"};
			socket.send(msgpack.encode(handshake));
		};

		socket.onerror = function (error) {
			console.error('WebSocket Error: ', error);
		};

		socket.onclose = function () {
			console.log('WebSocket connection closed.');
		};

		// Listen for messages from the server
		socket.onmessage = function (event) {
			// Decode the MessagePack-encoded data
			const data = msgpack.decode(new Uint8Array(event.data));
			if (data.chapter === "{{ .ChapterName }}") {
				if (data.type === "BeginningMessage") {
					window.top.postMessage(`started ${data.payload}`, "*")
				} else if (data.type === 'InitiateMessage') {
					const id = data.payload;
					// Find the video element with id equal to the payload integer
					const videoElement = document.getElementById(id.toString());
					if (videoElement) {
						// Create a container for the terminal with the required id
						const terminalContainer = document.createElement('div');
						terminalContainer.id = 'term-' + id;
						terminalContainer.className = 'terminal-container';
						// Insert the terminal container just after the video element
						videoElement.parentNode.insertBefore(terminalContainer, videoElement.nextSibling);
						// Initialize xterm.js terminal and open it in the container
						const term = new Terminal({ fontSize: 8 });
						const fitAddon = new FitAddon.FitAddon();
						term.loadAddon(fitAddon);
						term.open(terminalContainer);
						fitAddon.fit();
						// Store the terminal instance for later use
						terminals[id] = term;
					} else {
						console.warn('Video element with id ' + id + ' not found.');
					}
				} else if (data.type === 'LogMessage') {
					// Payload is expected to be an array: [id, message]
					const [id, message] = data.payload;
					const term = terminals[id];
					if (term) {
						term.write(message + '\r\n');
					} else {
						console.warn('Terminal for id ' + id + ' not found.');
					}
				} else if (data.type === 'CompletionMessage') {
					// Payload is expected to be an array: [id, videoSrc]
					const [id, videoSrc] = data.payload;
					window.top.postMessage(`loaded ${data.payload}`, "*")
					// Remove the terminal element if it exists
					const terminalContainer = document.getElementById('term-' + id);
					// const placeholder = document.getElementById('placeholder-' + id);
					// placeholder.remove();
					if (terminalContainer) {
						terminalContainer.parentNode.removeChild(terminalContainer);
						delete terminals[id];
					}
					// Change the src attribute of the video element with the given id
					const videoElement = document.getElementById(id.toString());
					const source = document.createElement("source");
					source.src = videoSrc;
					source.type = "video/mp4";
					if (videoElement) {
						videoElement.appendChild(source);
						videoElement.classList.remove("hidden");
						videoElement.load();
					} else {
						console.warn('Video element with id ' + id + ' not found.');
					}
				} else if (data.type === 'FinalMessage') {
					window.top.postMessage(`finished`, "*")
				}
			}
		};
	</script>
	<main>
		{{ .HTMLContent }}
	</main>
</body>

</html>
